const path = require('path');
const MFS = require('memory-fs');
const clineConfig = require('../build/webpack.client.config');
const serverConfig = require('../build/webpack.server.config');
const webpack = require('webpack');

module.exports = function setupDevServer(app,fn){
    let bundle
    let template
  
    clineConfig.entry.app = ['webpack-hot-middleware/client',clineConfig.entry.app];
    clineConfig.output.filename = '[name].js';
    clineConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        //new webpack.NoEmitOnErrorsPlugin()
    )
    const clineCompiler = webpack(clineConfig);
    var devMiddleware = require('webpack-dev-middleware')(clineCompiler,{
        publicPath:clineConfig.output.publicPath
    })
    app.use(devMiddleware);
    
    clineCompiler.plugin('done',(err, stats) => {
        const fs = devMiddleware.fileSystem
        const filePath = path.join(clineConfig.output.path, 'index.html')
        if (fs.existsSync(filePath)) {
            template = fs.readFileSync(filePath, 'utf-8')
            if (bundle) {
                fn(bundle, template)
            }
        }
    })
    // hot middleware
    app.use(require('webpack-hot-middleware')(clineCompiler))

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig)
    const mfs = new MFS()
    serverCompiler.outputFileSystem = mfs
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err
        stats = stats.toJson()
        stats.errors.forEach(err => console.error(err))
        stats.warnings.forEach(err => console.warn(err))

        // read bundle generated by vue-ssr-webpack-plugin
        const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-server-bundle.json')
        bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
        if (template) {
            fn(bundle, template)
        }
    })
}